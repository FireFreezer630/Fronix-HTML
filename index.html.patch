const token = localStorage.getItem('authToken');
        
        if (!token || isTokenExpired(token)) {
            console.log("Token is expired or invalid. Triggering re-authentication...");
            localStorage.removeItem('authToken');
            state.currentUser = null;
            updateLoginStateUI();
            return null;
        }
        
        return token;
    }
=======
    // Add new function to refresh token using Supabase client
    async function refreshToken() {
        try {
            const { data, error } = await supabaseClient.auth.refreshSession();
            if (error) {
                console.warn('Token refresh failed:', error.message);
                return null;
            }
            if (data?.session?.access_token) {
                localStorage.setItem('authToken', data.session.access_token);
                console.log('Token refreshed successfully');
                return data.session.access_token;
            }
            return null;
        } catch (error) {
            console.error('Unexpected error during token refresh:', error);
            return null;
        }
    }

    async function validateAndRefreshToken() {
        let token = localStorage.getItem('authToken');
        if (!token) return null;

        if (!isTokenExpired(token)) {
            return token;
        }

        console.log('Token expired, attempting to refresh...');
        const newToken = await refreshToken();
        if (newToken) {
            return newToken;
        } else {
            console.log('Token refresh failed, clearing auth state');
            localStorage.removeItem('authToken');
            state.currentUser = null;
            updateLoginStateUI();
            return null;
        }
    }
